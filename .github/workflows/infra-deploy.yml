name: Infrastructure Deployment

on:
  push:
    branches:
      - main # Trigger when pushing to main branch
  pull_request:

jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      DB_HOST: ${{ steps.export.outputs.DB_HOST }}
      DB_PASSWORD_SECRET_ARN: ${{ steps.export.outputs.DB_PASSWORD_SECRET_ARN }}
      WEB_PRIMARY_IP: ${{ steps.export.outputs.WEB_PRIMARY_IP }}
      WEB_SECONDARY_IP: ${{ steps.export.outputs.WEB_SECONDARY_IP }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Configure AWS Credentials
        run: |
          echo "Configuring AWS credentials..."
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          if [ -n "${{ secrets.AWS_SESSION_TOKEN }}" ]; then
            aws configure set aws_session_token ${{ secrets.AWS_SESSION_TOKEN }}
          fi
      - name: Terraform Init
        run: terraform init -backend-config="bucket=infra-project-terraform-state-bucket"
        working-directory: terraform
      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform
      - name: Terraform Format Check
        run: |
          terraform fmt -recursive
          terraform fmt -check
        working-directory: terraform
      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: terraform
      - name: Set Terraform Outputs as Job Outputs
        id: export
        run: |
          echo "Raw Terraform Output:"
          terraform output -json

          DB_HOST=$(terraform output -json | jq -r '.db_host.value')
          DB_PASSWORD_SECRET_ARN=$(terraform output -json | jq -r '.db_password_secret_arn.value')
          WEB_PRIMARY_IP=$(terraform output -json | jq -r '.web_primary_ip.value')
          WEB_SECONDARY_IP=$(terraform output -json | jq -r '.web_secondary_ip.value')

          echo "Extracted DB_HOST: $DB_HOST"
          echo "Extracted DB_PASSWORD_SECRET_ARN: $DB_PASSWORD_SECRET_ARN"
          echo "Extracted WEB_PRIMARY_IP: $WEB_PRIMARY_IP"
          echo "Extracted WEB_SECONDARY_IP: $WEB_SECONDARY_IP"

          echo "DB_HOST=$DB_HOST" >> $GITHUB_OUTPUT
          echo "DB_PASSWORD_SECRET_ARN=$DB_PASSWORD_SECRET_ARN" >> $GITHUB_OUTPUT
          echo "WEB_PRIMARY_IP=$WEB_PRIMARY_IP" >> $GITHUB_OUTPUT
          echo "WEB_SECONDARY_IP=$WEB_SECONDARY_IP" >> $GITHUB_OUTPUT
        working-directory: terraform
      # - name: Upload Inventory JSON
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: inventory
      #     path: ansible/inventory.json

  ansible:
    needs: terraform
    runs-on: ubuntu-latest
    env:
      DB_HOST: ${{ needs.terraform.outputs.DB_HOST }}
      DB_PASSWORD_SECRET_ARN: ${{ needs.terraform.outputs.DB_PASSWORD_SECRET_ARN }}
      WEB_PRIMARY_IP: ${{ needs.terraform.outputs.WEB_PRIMARY_IP }}
      WEB_SECONDARY_IP: ${{ needs.terraform.outputs.WEB_SECONDARY_IP }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Ansible
        run: sudo apt update && sudo apt install -y ansible
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/trojan.pem
          chmod 600 ~/.ssh/trojan.pem
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/trojan.pem
      - name: Retrieve DB Password from AWS Secrets Manager
        run: |
          env
          if [ -z "${{ env.DB_PASSWORD_SECRET_ARN }}" ]; then
            echo "Error: DB_PASSWORD_SECRET_ARN is missing!" && exit 1
          fi
          echo "DB_PASSWORD=$(aws secretsmanager get-secret-value --secret-id ${{ env.DB_PASSWORD_SECRET_ARN }} --query 'SecretString' --output text)" >> $GITHUB_ENV
      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i "${{ env.WEB_PRIMARY_IP }},${{ env.WEB_SECONDARY_IP }}" webserver.yml
        working-directory: ansible
      - name: Install MySQL Client
        run: |
          sudo apt update
          sudo apt install -y python3-pip
          pip3 install pymysql mysqlclient
      - name: Create Database
        run: |
          if [ -z "${{ env.DB_HOST }}" ] || [ -z "${{ env.DB_PASSWORD }}" ]; then
            echo "Error: Missing DB_HOST or DB_PASSWORD!" && exit 1
          fi
          mysql -h "${{ env.DB_HOST }}" -u admin -p"${{ env.DB_PASSWORD }}" -e "CREATE DATABASE IF NOT EXISTS retaildb;"
      - name: Increase Connection Limit
        run: |
          mysql -h "${{ env.DB_HOST }}" -u admin -p"${{ env.DB_PASSWORD }}" -e "SET GLOBAL max_connections = 200;"

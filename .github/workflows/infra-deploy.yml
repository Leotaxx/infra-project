name: Infrastructure Deployment

on:
  push:
    branches:
      - main # Trigger when pushing to main branch
  pull_request:

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set aws_secret_session_token ${{ secrets.AWS_SESSION_TOKEN }}
          aws configure set region us-east-1

      - name: Terraform Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: terraform apply -auto-approve -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -var "aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" -var "aws_secret_session_token=${{ secrets.AWS_SESSION_TOKEN }}"
        working-directory: terraform

  ansible:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Terraform Output
        id: terraform_output
        run: |
          ls -l
          echo "WEB_PRIMARY_IP=$(terraform output -raw web_primary_ip)" >> $GITHUB_ENV
          echo "WEB_SECONDARY_IP=$(terraform output -raw web_secondary_ip)" >> $GITHUB_ENV
        working-directory: terraform # âœ… Set working directory

      - name: Install Ansible
        run: sudo apt update && sudo apt install -y ansible

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/trojan.pem
          chmod 600 ~/.ssh/trojan.pem
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/trojan.pem

      - name: Verify SSH Connection
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/trojan.pem ec2-user@${{ env.WEB_PRIMARY_IP }} "echo 'Primary Server SSH Connection Successful'"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/trojan.pem ec2-user@${{ env.WEB_SECONDARY_IP }} "echo 'Secondary Server SSH Connection Successful'"

      - name: Run Ansible Playbook
        run: ansible-playbook -i inventory.py webserver.yml
